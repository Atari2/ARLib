name: CMake

on:
  push:
    branches: [ master, separate-include-source-dir ]
  pull_request:
    branches: [ master ]

env:
  CMAKE_BUILD_TYPE: Release
  CMAKE_GENERATOR: Ninja

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        compiler: [ msvc, gcc, clang ]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: msvc

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup compilers (gcc)
      run:  |
            sudo apt update
            sudo apt install gcc-13 g++-13 ninja-build
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'

    - name: Setup compilers (clang)
      run:  |
            sudo apt update
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 16
            sudo apt install ninja-build
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang'
    
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (gcc)
      working-directory: ${{github.workspace}}/build
      run: cmake -S ${{github.workspace}} -DCMAKE_C_COMPILER=gcc-13 -DCMAKE_CXX_COMPILER=g++-13
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
    
    - name: Configure CMake (clang)
      working-directory: ${{github.workspace}}/build
      run: cmake -S ${{github.workspace}} -DCMAKE_C_COMPILER=clang-16 -DCMAKE_CXX_COMPILER=clang++-16
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang'
      
    - name: Configure CMake (msvc)
      working-directory: ${{github.workspace}}/build
      shell: pwsh
      run:  |
            ${{github.workspace}}/setup_vsdev.ps1
            cmake -S ${{github.workspace}} -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
      if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
    
    - name: Configure CMake (clang-cl)
      working-directory: ${{github.workspace}}/build
      shell: pwsh
      run:  |
            ${{github.workspace}}/setup_vsdev.ps1
            cmake -S ${{github.workspace}} -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl
      if: matrix.os == 'windows-latest' && matrix.compiler == 'clang'

    - name: Build (windows)
      working-directory: ${{github.workspace}}/build
      shell: pwsh
      run:  |
            ${{github.workspace}}/setup_vsdev.ps1
            cmake --build ${{github.workspace}}/build --config ${{env.CMAKE_BUILD_TYPE}}
      if: matrix.os == 'windows-latest'
    
    - name: Build (linux)
      working-directory: ${{github.workspace}}/build
      run: cmake --build ${{github.workspace}}/build --config ${{env.CMAKE_BUILD_TYPE}}
      if: matrix.os == 'ubuntu-latest'

    - name: Test
      working-directory: ${{github.workspace}}/build/Tests
      run: ctest --rerun-failed --output-on-failure -C $BUILD_TYPE
    
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: ARLib-${{matrix.os}}-${{matrix.compiler}}
        path: ${{github.workspace}}/build/ARLib.lib
      if: matrix.os == 'windows-latest'
    
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: ARLib-${{matrix.os}}-${{matrix.compiler}}
        path: ${{github.workspace}}/build/libARLib.a
      if: matrix.os == 'ubuntu-latest'