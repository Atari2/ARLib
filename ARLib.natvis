<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="ARLib::Pair&lt;*,*&gt;">
		<Intrinsic ReturnType="$T1" Name="first" Expression="_m_first"/>
		<Intrinsic ReturnType="$T2" Name="second" Expression="_m_second"/>
		<DisplayString>{{ {first()}, {second()} }}</DisplayString>
		<Expand>
			<Item Name="[first]" ExcludeView="simple">_m_first</Item>
			<Item Name="[second]" ExcludeView="simple">_m_second</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::Array&lt;*&gt;">
	  <DisplayString>{{ size={$T2} }}</DisplayString>
      <Expand>
          <ArrayItems>
              <Size>$T2</Size>
              <ValuePointer>_m_storage_</ValuePointer>
          </ArrayItems>
      </Expand>
	</Type>
	<Type Name="ARLib::String">
		<Intrinsic Name="size" Expression="m_size"/>
		<Intrinsic Name="getCapacity" Expression="(size_t)(m_data_buf == m_local_buf ? 15 : m_allocated_capacity)"/>
		<DisplayString Condition="size() > 0">{m_data_buf,na} (size = {size()})</DisplayString>
		<DisplayString Condition="size() == 0">{{empty}}</DisplayString>
		<Expand>
			<Item Name="[capacity]" ExcludeView="simple">getCapacity()</Item>
			<Item Name="[size]" ExcludeView="simple">size()</Item>
			<ArrayItems>
				<Size>m_size</Size>
				<ValuePointer>m_data_buf</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
		<Type Name="ARLib::StringView">
		<Intrinsic Name="size" Expression="m_size"/>
		<Intrinsic Name="ismut" Expression="m_start_mut != nullptr"/>
		<DisplayString Condition="size() > 0">{m_start,na} (size = {size()})</DisplayString>
		<DisplayString Condition="size() == 0">{{empty}}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">size()</Item>
			<Item Name="[is mutable]" ExcludeView="simple">ismut()</Item>
			<ArrayItems>
				<Size>m_size</Size>
				<ValuePointer>m_start</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="ARLib::WString">
		<Intrinsic Name="size" Expression="m_size"/>
		<Intrinsic Name="getCapacity" Expression="(size_t)(m_data_buf == m_local_buf ? 15 : m_allocated_capacity)"/>
		<DisplayString Condition="size() > 0">{m_data_buf,na} (size = {size()})</DisplayString>
		<DisplayString Condition="size() == 0">{{empty}}</DisplayString>
		<Expand>
			<Item Name="[capacity]" ExcludeView="simple">getCapacity()</Item>
			<Item Name="[size]" ExcludeView="simple">size()</Item>
			<ArrayItems>
				<Size>m_size</Size>
				<ValuePointer>m_data_buf</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="ARLib::WStringView">
		<Intrinsic Name="size" Expression="m_size"/>
		<Intrinsic Name="ismut" Expression="m_start_mut != nullptr"/>
		<DisplayString Condition="size() > 0">{m_start,na} (size = {size()})</DisplayString>
		<DisplayString Condition="size() == 0">{{empty}}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">size()</Item>
			<Item Name="[is mutable]" ExcludeView="simple">ismut()</Item>
			<ArrayItems>
				<Size>m_size</Size>
				<ValuePointer>m_start</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="ARLib::Path">
		<DisplayString>{ m_path }</DisplayString>
		<Expand>
			<Item Name="[path]" ExcludeView="simple">m_path</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::Vector&lt;*&gt;">
		<Intrinsic Name="data" Expression="m_storage"/>
		<Intrinsic Name="size" Expression="(size_t)(m_size)" />
		<Intrinsic Name="capacity" Expression="(size_t)(m_capacity)" />
		<SmartPointer Usage="Indexable" DefaultExpansion="false">data()</SmartPointer>
		<DisplayString Condition="size() > 0">{data(),na} (size = {size()})</DisplayString>
		<DisplayString Condition="size() == 0">{{empty}}</DisplayString>
		<Expand>
			<Item Name="[capacity]" ExcludeView="simple">capacity()</Item>
			<ArrayItems>
				<Size>size()</Size>
				<ValuePointer>data()</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="ARLib::Monostate">
		<DisplayString>Monostate object</DisplayString>
	</Type>
	<Type Name="ARLib::detail::VariantStorage&lt;*&gt;" Priority="Low">
		<Intrinsic Name="active" Expression="(bool)is_active"/>
		<Intrinsic Name="getItem" Expression="head"/>
		<DisplayString Condition="active()">{getItem()}</DisplayString>
		<DisplayString Condition="!active()">empty</DisplayString>
		<Expand>
			<Item Condition="active()" Name="[head]" ExcludeView="simple">head</Item>
			<Item Name="[active]" ExcludeView="simple">is_active</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::detail::VariantStorage&lt;*,*&gt;" Priority="High">
		<Intrinsic Name="active" Expression="(bool)is_active"/>
		<Intrinsic Name="getHead" Expression="head"/>
		<Intrinsic Name="getTail" Expression="tail"/>
		<DisplayString Condition="active()">{getHead()}</DisplayString>
		<DisplayString Condition="!active()">{getTail()}</DisplayString>
		<Expand>
			<Item Condition="active()" Name="[head]" ExcludeView="simple">head</Item>
			<Item Condition="!active()" Name="[tail]" ExcludeView="simple">tail</Item>
			<Item Name="[active]" ExcludeView="simple">is_active</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::Variant&lt;*&gt;">
		<DisplayString>{{ storage = {m_storage} }}</DisplayString>
		<Expand>
			<Item Name="[storage]" ExcludeView="simple">m_storage</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::Optional&lt;*&gt;">
		<Intrinsic Name="exists" Expression="(bool)m_exists"/>
		<Intrinsic Name="getValue" Expression="*m_object"/>
		<DisplayString Condition="exists()">{{ {getValue()} }}</DisplayString>
		<DisplayString Condition="!exists()">{{ empty }}</DisplayString>
		<Expand>
			<Item Condition="exists()" Name="[value]" ExcludeView="simple">getValue()</Item>
			<Item Name="[exists]" ExcludeView="simple">exists()</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::UniquePtr&lt;*&gt;">
		<Intrinsic Name="getValue" Expression="*m_storage"/>
		<Intrinsic Name="exists" Expression="m_storage != nullptr"/>
		<DisplayString Condition="exists()">{{ {getValue()} }}</DisplayString>
		<DisplayString Condition="!exists()">{{ empty }}</DisplayString>
		<Expand>
			<Item Name="[value]" ExcludeView="simple">m_storage</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::RefCountBase&lt;*&gt;">
		<Intrinsic Name="getValue" Expression="*m_object"/>
		<Intrinsic Name="exists" Expression="m_object != nullptr"/>
		<Intrinsic Name="refCount" Expression="m_counter"/>
		<DisplayString Condition="exists()">{{ {getValue()}, refcount = {refCount()} }}</DisplayString>
		<DisplayString Condition="!exists()">{{ empty, refcount = {refCount()} }}</DisplayString>
		<Expand>
			<Item Name="[object]" ExcludeView="simple">m_object</Item>
			<Item Name="[refcount]" ExcludeView="simple">m_counter</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::SharedPtr&lt;*&gt;">
		<Intrinsic Name="getValue" Expression="*m_storage"/>
		<Intrinsic Name="getRefcount" Expression="m_count->m_counter"/>
		<Intrinsic Name="exists" Expression="(bool)((m_storage != nullptr) + (m_count != nullptr))"/>
		<DisplayString Condition="exists()">{{ {getValue()}, refcount = {getRefcount()} }}</DisplayString>
		<DisplayString Condition="!exists()">{{ empty }}</DisplayString>
		<Expand>
			<Item Name="[value]" ExcludeView="simple">m_storage</Item>
			<Item Name="[refbase]" ExcludeView="simple">m_count</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::RefBox&lt;*&gt;">
		<Intrinsic Name="exists" Expression="m_boxed != nullptr"/>
		<Intrinsic Name="reference" Expression="*m_boxed"/>
		<DisplayString Condition="exists()">{{ ref = {reference()} }}</DisplayString>
		<DisplayString Condition="!exists()">{{ empty }}</DisplayString>
		<Expand>
			<Item Name="[ref]">m_boxed</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::Result&lt;ARLib::DefaultOk,*&gt;" Priority="High">
		<Intrinsic Name="IsOk" Expression="m_type == CurrType::Ok"/>
		<Intrinsic Name="IsError" Expression="m_type == CurrType::Error"/>
		<DisplayString Condition="IsOk()">{{ ok, DefaultOk }}}</DisplayString>
		<DisplayString Condition="IsError()">{{ error, {m_err} }}</DisplayString>
		<Expand>
			<Item Name="[error]" Condition="IsError()">m_err</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::Result&lt;*,ARLib::DefaultErr&gt;" Priority="High">
		<Intrinsic Name="IsOk" Expression="m_type == CurrType::Ok"/>
		<Intrinsic Name="IsError" Expression="m_type == CurrType::Error"/>
		<DisplayString Condition="IsOk()">{{ ok, {m_ok} }}}</DisplayString>
		<DisplayString Condition="IsError()">{{ error, DefaultErr }}</DisplayString>
		<Expand>
			<Item Name="[result]" Condition="IsOk()">m_ok</Item>
		</Expand>
	</Type>
	<Type Name="ARLib::Result&lt;*&gt;" Priority="Low">
		<Intrinsic Name="IsOk" Expression="m_type == CurrType::Ok"/>
		<Intrinsic Name="IsError" Expression="m_type == CurrType::Error"/>
		<DisplayString Condition="IsOk()">{{ ok, {m_ok} }}}</DisplayString>
		<DisplayString Condition="IsError()">{{ error, {m_err} }}</DisplayString>
		<Expand>
			<Item Name="[result]" Condition="IsOk()">m_ok</Item>
			<Item Name="[error]" Condition="IsError()">m_err</Item>
		</Expand>
	</Type>
</AutoVisualizer>
